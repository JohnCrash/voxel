// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `LXSliceSchool.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var LXGrid = __M.require(module, 
    [
        "LXGrid.Common/LXSliceDefine",
        "LXGrid.Main/School/LXSliceSchoolDefine"
    ]).LXGrid;
    
    var Slice = Ice.Slice;

    LXGrid.Main = __M.module("LXGrid.Main");

    LXGrid.Main.School = __M.module("LXGrid.Main.School");

    Object.defineProperty(LXGrid.Main.School, 'IObjectSchFindName', {
        value: "IObjectSchFind"
    });

    LXGrid.Main.School.IObjectSchFind = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            LXGrid.Common.IObjectBase
        ], 2,
        [
            "::Ice::Object",
            "::LXGrid::Common::IObjectBase",
            "::LXGrid::Main::School::IObjectSchFind"
        ],
        -1, undefined, undefined, false);

    LXGrid.Main.School.IObjectSchFindPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Main.School.IObjectSchFind.ice_staticId, [
        LXGrid.Common.IObjectBasePrx]);

    Slice.defineOperations(LXGrid.Main.School.IObjectSchFind, LXGrid.Main.School.IObjectSchFindPrx,
    {
        "SchoolHint": [, , , 1, , [LXGrid.Common.LXReturn], [[3], [7]], [["Ice.StringSeqHelper"]], , , ],
        "SchoolFind": [, , , 1, , [LXGrid.Common.LXReturn], [[3], [3], [7], [1], [3], [3]], [[3], ["LXGrid.Main.School.LXSchFindUserSeqHelper"]], , , ],
        "SchoolListUser": [, , , 1, , [LXGrid.Common.LXReturn], [[3], [3], [3]], [[3], ["LXGrid.Main.School.LXSchFindUserSeqHelper"]], , , ],
        "SchoolListClass": [, , , 1, , [LXGrid.Common.LXReturn], [[3]], [["Ice.IntSeqHelper"]], , , ],
        "SchoolStat": [, , , 1, , [LXGrid.Common.LXReturn], [[3]], [[LXGrid.Main.School.LXSchFindStat]], , , ],
        "ClassFind": [, , , 1, , [LXGrid.Common.LXReturn], [[3], [3], [3], [7], [1]], [["LXGrid.Main.School.LXSchFindUserSeqHelper"]], , , ],
        "ClassList": [, , , 1, , [LXGrid.Common.LXReturn], [[3], [3]], [["LXGrid.Main.School.LXSchFindUserSeqHelper"]], , , ]
    });

    LXGrid.Main.School.IFacetSchFindInside = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Main::School::IFacetSchFindInside"
        ],
        -1, undefined, undefined, false);

    LXGrid.Main.School.IFacetSchFindInsidePrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Main.School.IFacetSchFindInside.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Main.School.IFacetSchFindInside, LXGrid.Main.School.IFacetSchFindInsidePrx,
    {
        "OnSchoolClassChanged": [, , , 1, , , [[3]], , , , ],
        "OnZoneMemberChanged": [, , , 1, , , [[3], [3]], , , , ],
        "OnUserDataChanged": [, , , 1, , , [[3], [3], ["Ice.IntSeqHelper"]], , , , ]
    });

    Object.defineProperty(LXGrid.Main.School, 'IObjectSchMetaName', {
        value: "IObjectSchMeta"
    });

    LXGrid.Main.School.IObjectSchMeta = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            LXGrid.Common.IObjectMasterSlaveBase
        ], 3,
        [
            "::Ice::Object",
            "::LXGrid::Common::IObjectBase",
            "::LXGrid::Common::IObjectMasterSlaveBase",
            "::LXGrid::Main::School::IObjectSchMeta"
        ],
        -1, undefined, undefined, false);

    LXGrid.Main.School.IObjectSchMetaPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Main.School.IObjectSchMeta.ice_staticId, [
        LXGrid.Common.IObjectMasterSlaveBasePrx]);

    Slice.defineOperations(LXGrid.Main.School.IObjectSchMeta, LXGrid.Main.School.IObjectSchMetaPrx);
    exports.LXGrid = LXGrid;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));
