// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `LXSliceNewSignConfig.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var LXGrid = __M.require(module, 
    [
        "LXGrid.Common/LXSliceDefine",
        "LXGrid.App/NewSign/LXSliceNewSignDefine"
    ]).LXGrid;
    
    var Slice = Ice.Slice;

    LXGrid.App = __M.module("LXGrid.App");

    LXGrid.App.NewSign = __M.module("LXGrid.App.NewSign");

    Object.defineProperty(LXGrid.App.NewSign, 'IObjectName_NewSign_Config', {
        value: "IObjectNewSignConfig"
    });

    LXGrid.App.NewSign.IObjectNewSignConfig = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            LXGrid.Common.IObjectMasterSlaveBase
        ], 1,
        [
            "::Ice::Object",
            "::LXGrid::App::NewSign::IObjectNewSignConfig",
            "::LXGrid::Common::IObjectBase",
            "::LXGrid::Common::IObjectMasterSlaveBase"
        ],
        -1, undefined, undefined, false);

    LXGrid.App.NewSign.IObjectNewSignConfigPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.App.NewSign.IObjectNewSignConfig.ice_staticId, [
        LXGrid.Common.IObjectMasterSlaveBasePrx]);

    Slice.defineOperations(LXGrid.App.NewSign.IObjectNewSignConfig, LXGrid.App.NewSign.IObjectNewSignConfigPrx,
    {
        "GetAllProtocolInfo": [, , , , , [LXGrid.Common.LXReturn], , [["LXGrid.App.NewSign.ProtocolMsgSetSeqHelper"]], , , true],
        "AddProtocolInfo": [, , , 1, , [LXGrid.Common.LXReturn], [["LXGrid.App.NewSign.ProtocolMsgSet", true]], , , true, ],
        "DeleteProtocolInfo": [, , , 1, , [LXGrid.Common.LXReturn], [[3]], , , , ],
        "UpdateProtocolInfo": [, , , 1, , [LXGrid.Common.LXReturn], [["LXGrid.App.NewSign.ProtocolMsgSet", true]], , , true, ],
        "GetSignTaskByPage": [, , , , , [LXGrid.Common.LXReturn], [[3], [3]], [[3], ["LXGrid.App.NewSign.SignTaskSeqHelper"]], , , true],
        "AddSignTask": [, , , 1, , [LXGrid.Common.LXReturn], [["LXGrid.App.NewSign.SignTask", true]], , , true, ],
        "DeleteSignTask": [, , , 1, , [LXGrid.Common.LXReturn], [[7]], , , , ],
        "UpdateSignTask": [, , , 1, , [LXGrid.Common.LXReturn], [["LXGrid.App.NewSign.SignTask", true]], , , true, ],
        "GetRewardRegister": [, , , , , [LXGrid.Common.LXReturn], , [["LXGrid.App.NewSign.RewardRegisterSeqHelper"]], , , true],
        "AddRewardRegister": [, , , 1, , [LXGrid.Common.LXReturn], [["LXGrid.App.NewSign.RewardRegister", true]], , , true, ],
        "DeleteRewardRegister": [, , , 1, , [LXGrid.Common.LXReturn], [[3]], , , , ],
        "UpdateRewardRegister": [, , , 1, , [LXGrid.Common.LXReturn], [["LXGrid.App.NewSign.RewardRegister", true]], , , true, ],
        "GetSignGoldSet": [, , , , , [LXGrid.Common.LXReturn], , [["LXGrid.App.NewSign.SignGoldSetSeqHelper"]], , , true],
        "AddSignGoldSet": [, , , 1, , [LXGrid.Common.LXReturn], [["LXGrid.App.NewSign.SignGoldSet", true]], , , true, ],
        "DeleteSignGoldSet": [, , , 1, , [LXGrid.Common.LXReturn], [[3]], , , , ],
        "UpdateSignGoldSet": [, , , 1, , [LXGrid.Common.LXReturn], [["LXGrid.App.NewSign.SignGoldSet", true]], , , true, ],
        "ReloadProtocolInfo": [, , , 1, , [LXGrid.Common.LXReturn], , , , , ],
        "ReloadSignTask": [, , , 1, , [LXGrid.Common.LXReturn], , , , , ],
        "ReloadSignGoldSet": [, , , 1, , [LXGrid.Common.LXReturn], , , , , ],
        "CalcZoneSignRate": [, , , 1, , [LXGrid.Common.LXReturn], [[4]], , , , ]
    });
    exports.LXGrid = LXGrid;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));
