// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `LXSliceNoticeDefine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var LXGrid = __M.require(module, 
    [
        "LXGrid.Common/LXSliceDefine",
        "LXGrid.Main/Profile/LXSliceUserProfileDefine"
    ]).LXGrid;
    
    var Slice = Ice.Slice;

    LXGrid.App = __M.module("LXGrid.App");

    LXGrid.App.Notice = __M.module("LXGrid.App.Notice");

    LXGrid.App.Notice.LXEnumErrorInformation = Slice.defineEnum([
        ['LXErrorNoticeNotExist', 5001], ['LXErrorNoticeAreadyDel', 5002]]);

    LXGrid.App.Notice.LXEnumScopeType = Slice.defineEnum([
        ['LXScopeType_ProvinceEdu', 1], ['LXScopeType_CityEdu', 2], ['LXScopeType_CountyEdu', 4], ['LXScopeType_AreaSch', 8], ['LXScopeType_School', 16],
        ['LXScopeType_Class', 32], ['LXScopeType_Zone', 64], ['LXScopeType_Person', 128]]);

    LXGrid.App.Notice.LXEnumNoticeStatus = Slice.defineEnum([
        ['LXEnumStatus_Normal', 0], ['LXEnumStatus_Delete', 1], ['LXEnumStatus_AdminDelete', 2]]);

    LXGrid.App.Notice.LXEnumNoticeType = Slice.defineEnum([
        ['LXEnumNotice_Notice', 1], ['LXEnumNotice_SystemNotice', 2], ['LXEnumNotice_SMS', 4]]);

    LXGrid.App.Notice.LXEnumLimitType = Slice.defineEnum([
        ['LXLimitType_Null', 0], ['LXLimitType_ConfirmNotice', 1], ['LXLimitType_OpenWords', 2]]);
    Slice.defineDictionary(LXGrid.App.Notice, "LXScopeViewDict", "LXScopeViewDictHelper", "Ice.IntHelper", "Ice.IntSeqHelper", false, undefined, undefined, Ice.ArrayUtil.equals);

    LXGrid.App.Notice.LXSubmitStatus = Slice.defineObject(
        function(readstatus, confirmstatus)
        {
            Ice.Object.call(this);
            this.readstatus = readstatus !== undefined ? readstatus : false;
            this.confirmstatus = confirmstatus !== undefined ? confirmstatus : false;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::App::Notice::LXSubmitStatus"
        ],
        -1,
        function(__os)
        {
            __os.writeBool(this.readstatus);
            __os.writeBool(this.confirmstatus);
        },
        function(__is)
        {
            this.readstatus = __is.readBool();
            this.confirmstatus = __is.readBool();
        },
        false);

    LXGrid.App.Notice.LXSubmitStatusPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.App.Notice.LXSubmitStatus.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.App.Notice.LXSubmitStatus, LXGrid.App.Notice.LXSubmitStatusPrx);

    LXGrid.App.Notice.LXScope = Slice.defineObject(
        function(scopeview, scoperoles)
        {
            Ice.Object.call(this);
            this.scopeview = scopeview !== undefined ? scopeview : null;
            this.scoperoles = scoperoles !== undefined ? scoperoles : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::App::Notice::LXScope"
        ],
        -1,
        function(__os)
        {
            LXGrid.App.Notice.LXScopeViewDictHelper.write(__os, this.scopeview);
            Ice.IntSeqHelper.write(__os, this.scoperoles);
        },
        function(__is)
        {
            this.scopeview = LXGrid.App.Notice.LXScopeViewDictHelper.read(__is);
            this.scoperoles = Ice.IntSeqHelper.read(__is);
        },
        false);

    LXGrid.App.Notice.LXScopePrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.App.Notice.LXScope.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.App.Notice.LXScope, LXGrid.App.Notice.LXScopePrx);

    LXGrid.App.Notice.LXNoticeInfo = Slice.defineObject(
        function(noticeid, creatorid, creatorname, title, pubtime, status, type, limittype)
        {
            Ice.Object.call(this);
            this.noticeid = noticeid !== undefined ? noticeid : "";
            this.creatorid = creatorid !== undefined ? creatorid : 0;
            this.creatorname = creatorname !== undefined ? creatorname : "";
            this.title = title !== undefined ? title : "";
            this.pubtime = pubtime !== undefined ? pubtime : 0;
            this.status = status !== undefined ? status : 0;
            this.type = type !== undefined ? type : 0;
            this.limittype = limittype !== undefined ? limittype : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::App::Notice::LXNoticeInfo"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.noticeid);
            __os.writeInt(this.creatorid);
            __os.writeString(this.creatorname);
            __os.writeString(this.title);
            __os.writeLong(this.pubtime);
            __os.writeInt(this.status);
            __os.writeInt(this.type);
            __os.writeInt(this.limittype);
        },
        function(__is)
        {
            this.noticeid = __is.readString();
            this.creatorid = __is.readInt();
            this.creatorname = __is.readString();
            this.title = __is.readString();
            this.pubtime = __is.readLong();
            this.status = __is.readInt();
            this.type = __is.readInt();
            this.limittype = __is.readInt();
        },
        false);

    LXGrid.App.Notice.LXNoticeInfoPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.App.Notice.LXNoticeInfo.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.App.Notice.LXNoticeInfo, LXGrid.App.Notice.LXNoticeInfoPrx);
    Slice.defineSequence(LXGrid.App.Notice, "LXNoticeInfoSeqHelper", "Ice.ObjectHelper", false, "LXGrid.App.Notice.LXNoticeInfo");

    LXGrid.App.Notice.LXStat = Slice.defineStruct(
        function(readcount, confirmcount)
        {
            this.readcount = readcount !== undefined ? readcount : 0;
            this.confirmcount = confirmcount !== undefined ? confirmcount : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.readcount);
            __os.writeInt(this.confirmcount);
        },
        function(__is)
        {
            this.readcount = __is.readInt();
            this.confirmcount = __is.readInt();
        },
        8, 
        true);
    Slice.defineDictionary(LXGrid.App.Notice, "LXStatCountDict", "LXStatCountDictHelper", "Ice.IntHelper", "LXGrid.App.Notice.LXStat", true, undefined, undefined, Ice.HashMap.compareEquals);
    Slice.defineDictionary(LXGrid.App.Notice, "LXScopeStatDict", "LXScopeStatDictHelper", "Ice.IntHelper", "LXGrid.App.Notice.LXStatCountDictHelper", false, undefined, undefined, Ice.HashMap.compareEquals);

    LXGrid.App.Notice.LXScopeStat = Slice.defineStruct(
        function(publishernum, pubnum, readnum)
        {
            this.publishernum = publishernum !== undefined ? publishernum : 0;
            this.pubnum = pubnum !== undefined ? pubnum : 0;
            this.readnum = readnum !== undefined ? readnum : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.publishernum);
            __os.writeInt(this.pubnum);
            __os.writeInt(this.readnum);
        },
        function(__is)
        {
            this.publishernum = __is.readInt();
            this.pubnum = __is.readInt();
            this.readnum = __is.readInt();
        },
        12, 
        true);
    Slice.defineDictionary(LXGrid.App.Notice, "LXDataStatDict", "LXDataStatDictHelper", "Ice.IntHelper", "LXGrid.App.Notice.LXScopeStat", true, undefined, undefined, Ice.HashMap.compareEquals);
    exports.LXGrid = LXGrid;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));
