// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `LXSliceMachineDefine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var LXGrid = __M.require(module, 
    [
        "LXGrid.System/LXSliceBase",
        "LXGrid.OM/LXSliceGridDefine"
    ]).LXGrid;
    
    var Slice = Ice.Slice;

    LXGrid.Machine = __M.module("LXGrid.Machine");

    LXGrid.Machine.LXDiskInfo = Slice.defineObject(
        function(label, name, issys, total)
        {
            Ice.Object.call(this);
            this.label = label !== undefined ? label : "";
            this.name = name !== undefined ? name : "";
            this.issys = issys !== undefined ? issys : false;
            this.total = total !== undefined ? total : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXDiskInfo"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.label);
            __os.writeString(this.name);
            __os.writeBool(this.issys);
            __os.writeInt(this.total);
        },
        function(__is)
        {
            this.label = __is.readString();
            this.name = __is.readString();
            this.issys = __is.readBool();
            this.total = __is.readInt();
        },
        false);

    LXGrid.Machine.LXDiskInfoPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXDiskInfo.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXDiskInfo, LXGrid.Machine.LXDiskInfoPrx);
    Slice.defineSequence(LXGrid.Machine, "LXDiskInfoSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXDiskInfo");

    LXGrid.Machine.LXNetInfo = Slice.defineObject(
        function(ipaddr, macaddr)
        {
            Ice.Object.call(this);
            this.ipaddr = ipaddr !== undefined ? ipaddr : "";
            this.macaddr = macaddr !== undefined ? macaddr : "";
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXNetInfo"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.ipaddr);
            __os.writeString(this.macaddr);
        },
        function(__is)
        {
            this.ipaddr = __is.readString();
            this.macaddr = __is.readString();
        },
        false);

    LXGrid.Machine.LXNetInfoPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXNetInfo.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXNetInfo, LXGrid.Machine.LXNetInfoPrx);
    Slice.defineSequence(LXGrid.Machine, "LXNetInfoSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXNetInfo");

    LXGrid.Machine.LXHostInfo = Slice.defineObject(
        function(cpunum, cpufreq, memnum, disks, nets)
        {
            Ice.Object.call(this);
            this.cpunum = cpunum !== undefined ? cpunum : 0;
            this.cpufreq = cpufreq !== undefined ? cpufreq : 0;
            this.memnum = memnum !== undefined ? memnum : 0;
            this.disks = disks !== undefined ? disks : null;
            this.nets = nets !== undefined ? nets : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXHostInfo"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.cpunum);
            __os.writeInt(this.cpufreq);
            __os.writeInt(this.memnum);
            LXGrid.Machine.LXDiskInfoSeqHelper.write(__os, this.disks);
            LXGrid.Machine.LXNetInfoSeqHelper.write(__os, this.nets);
        },
        function(__is)
        {
            this.cpunum = __is.readInt();
            this.cpufreq = __is.readInt();
            this.memnum = __is.readInt();
            this.disks = LXGrid.Machine.LXDiskInfoSeqHelper.read(__is);
            this.nets = LXGrid.Machine.LXNetInfoSeqHelper.read(__is);
        },
        false);

    LXGrid.Machine.LXHostInfoPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXHostInfo.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXHostInfo, LXGrid.Machine.LXHostInfoPrx);
    Slice.defineSequence(LXGrid.Machine, "LXHostInfoSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXHostInfo");

    LXGrid.Machine.LXNetStat = Slice.defineObject(
        function(ipaddr, sendrate, recvrate)
        {
            Ice.Object.call(this);
            this.ipaddr = ipaddr !== undefined ? ipaddr : "";
            this.sendrate = sendrate !== undefined ? sendrate : 0;
            this.recvrate = recvrate !== undefined ? recvrate : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXNetStat"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.ipaddr);
            __os.writeInt(this.sendrate);
            __os.writeInt(this.recvrate);
        },
        function(__is)
        {
            this.ipaddr = __is.readString();
            this.sendrate = __is.readInt();
            this.recvrate = __is.readInt();
        },
        false);

    LXGrid.Machine.LXNetStatPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXNetStat.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXNetStat, LXGrid.Machine.LXNetStatPrx);
    Slice.defineSequence(LXGrid.Machine, "LXNetStatSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXNetStat");

    LXGrid.Machine.LXProcessStat = Slice.defineObject(
        function(pid, name, cpuusage, memusage, threadnum, handlenum)
        {
            Ice.Object.call(this);
            this.pid = pid !== undefined ? pid : 0;
            this.name = name !== undefined ? name : "";
            this.cpuusage = cpuusage !== undefined ? cpuusage : 0;
            this.memusage = memusage !== undefined ? memusage : 0;
            this.threadnum = threadnum !== undefined ? threadnum : 0;
            this.handlenum = handlenum !== undefined ? handlenum : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXProcessStat"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.pid);
            __os.writeString(this.name);
            __os.writeInt(this.cpuusage);
            __os.writeInt(this.memusage);
            __os.writeInt(this.threadnum);
            __os.writeInt(this.handlenum);
        },
        function(__is)
        {
            this.pid = __is.readInt();
            this.name = __is.readString();
            this.cpuusage = __is.readInt();
            this.memusage = __is.readInt();
            this.threadnum = __is.readInt();
            this.handlenum = __is.readInt();
        },
        false);

    LXGrid.Machine.LXProcessStatPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXProcessStat.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXProcessStat, LXGrid.Machine.LXProcessStatPrx);
    Slice.defineSequence(LXGrid.Machine, "LXProcessStatSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXProcessStat");

    LXGrid.Machine.LXHostStat = Slice.defineObject(
        function(cpuusage, memusage, diskstat, netstat, process, intime)
        {
            Ice.Object.call(this);
            this.cpuusage = cpuusage !== undefined ? cpuusage : 0;
            this.memusage = memusage !== undefined ? memusage : 0;
            this.diskstat = diskstat !== undefined ? diskstat : null;
            this.netstat = netstat !== undefined ? netstat : null;
            this.process = process !== undefined ? process : null;
            this.intime = intime !== undefined ? intime : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXHostStat"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.cpuusage);
            __os.writeInt(this.memusage);
            Ice.IntSeqHelper.write(__os, this.diskstat);
            LXGrid.Machine.LXNetStatSeqHelper.write(__os, this.netstat);
            LXGrid.Machine.LXProcessStatSeqHelper.write(__os, this.process);
            __os.writeLong(this.intime);
        },
        function(__is)
        {
            this.cpuusage = __is.readInt();
            this.memusage = __is.readInt();
            this.diskstat = Ice.IntSeqHelper.read(__is);
            this.netstat = LXGrid.Machine.LXNetStatSeqHelper.read(__is);
            this.process = LXGrid.Machine.LXProcessStatSeqHelper.read(__is);
            this.intime = __is.readLong();
        },
        false);

    LXGrid.Machine.LXHostStatPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXHostStat.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXHostStat, LXGrid.Machine.LXHostStatPrx);
    Slice.defineSequence(LXGrid.Machine, "LXHostStatSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXHostStat");

    LXGrid.Machine.LXHostStatBase = Slice.defineObject(
        function(hostid, cpuusage, memusage, diskstat, intime)
        {
            Ice.Object.call(this);
            this.hostid = hostid !== undefined ? hostid : "";
            this.cpuusage = cpuusage !== undefined ? cpuusage : 0;
            this.memusage = memusage !== undefined ? memusage : 0;
            this.diskstat = diskstat !== undefined ? diskstat : null;
            this.intime = intime !== undefined ? intime : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXHostStatBase"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.hostid);
            __os.writeInt(this.cpuusage);
            __os.writeInt(this.memusage);
            Ice.IntSeqHelper.write(__os, this.diskstat);
            __os.writeLong(this.intime);
        },
        function(__is)
        {
            this.hostid = __is.readString();
            this.cpuusage = __is.readInt();
            this.memusage = __is.readInt();
            this.diskstat = Ice.IntSeqHelper.read(__is);
            this.intime = __is.readLong();
        },
        false);

    LXGrid.Machine.LXHostStatBasePrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXHostStatBase.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXHostStatBase, LXGrid.Machine.LXHostStatBasePrx);
    Slice.defineSequence(LXGrid.Machine, "LXHostStatBaseSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXHostStatBase");

    LXGrid.Machine.LXEnumAlarmType = Slice.defineEnum([
        ['LXAlarmType_CPU', 1], ['LXAlarmType_Mem', 2], ['LXAlarmType_Disk', 4]]);

    LXGrid.Machine.LXEnumNoticeType = Slice.defineEnum([
        ['LXNoticeType_Message', 1], ['LXNoticeType_DingDing', 2]]);

    LXGrid.Machine.LXAlarmType = Slice.defineObject(
        function(alarmtype, alarm_limit, continuous, alarm_interval)
        {
            Ice.Object.call(this);
            this.alarmtype = alarmtype !== undefined ? alarmtype : LXGrid.Machine.LXEnumAlarmType.LXAlarmType_CPU;
            this.alarm_limit = alarm_limit !== undefined ? alarm_limit : 0;
            this.continuous = continuous !== undefined ? continuous : 0;
            this.alarm_interval = alarm_interval !== undefined ? alarm_interval : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXAlarmType"
        ],
        -1,
        function(__os)
        {
            LXGrid.Machine.LXEnumAlarmType.__write(__os, this.alarmtype);
            __os.writeInt(this.alarm_limit);
            __os.writeInt(this.continuous);
            __os.writeInt(this.alarm_interval);
        },
        function(__is)
        {
            this.alarmtype = LXGrid.Machine.LXEnumAlarmType.__read(__is);
            this.alarm_limit = __is.readInt();
            this.continuous = __is.readInt();
            this.alarm_interval = __is.readInt();
        },
        false);

    LXGrid.Machine.LXAlarmTypePrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXAlarmType.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXAlarmType, LXGrid.Machine.LXAlarmTypePrx);
    Slice.defineSequence(LXGrid.Machine, "LXAlarmTypeSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXAlarmType");

    LXGrid.Machine.LXNoticeType = Slice.defineObject(
        function(noticetype, objects)
        {
            Ice.Object.call(this);
            this.noticetype = noticetype !== undefined ? noticetype : LXGrid.Machine.LXEnumNoticeType.LXNoticeType_Message;
            this.objects = objects !== undefined ? objects : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXNoticeType"
        ],
        -1,
        function(__os)
        {
            LXGrid.Machine.LXEnumNoticeType.__write(__os, this.noticetype);
            Ice.StringSeqHelper.write(__os, this.objects);
        },
        function(__is)
        {
            this.noticetype = LXGrid.Machine.LXEnumNoticeType.__read(__is);
            this.objects = Ice.StringSeqHelper.read(__is);
        },
        false);

    LXGrid.Machine.LXNoticeTypePrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXNoticeType.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXNoticeType, LXGrid.Machine.LXNoticeTypePrx);
    Slice.defineSequence(LXGrid.Machine, "LXNoticeTypeSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXNoticeType");

    LXGrid.Machine.LXAlarmTask = Slice.defineObject(
        function(targets, alarmtypes, noticetypes)
        {
            Ice.Object.call(this);
            this.targets = targets !== undefined ? targets : null;
            this.alarmtypes = alarmtypes !== undefined ? alarmtypes : null;
            this.noticetypes = noticetypes !== undefined ? noticetypes : null;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXAlarmTask"
        ],
        -1,
        function(__os)
        {
            Ice.StringSeqHelper.write(__os, this.targets);
            LXGrid.Machine.LXAlarmTypeSeqHelper.write(__os, this.alarmtypes);
            LXGrid.Machine.LXNoticeTypeSeqHelper.write(__os, this.noticetypes);
        },
        function(__is)
        {
            this.targets = Ice.StringSeqHelper.read(__is);
            this.alarmtypes = LXGrid.Machine.LXAlarmTypeSeqHelper.read(__is);
            this.noticetypes = LXGrid.Machine.LXNoticeTypeSeqHelper.read(__is);
        },
        false);

    LXGrid.Machine.LXAlarmTaskPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXAlarmTask.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXAlarmTask, LXGrid.Machine.LXAlarmTaskPrx);
    Slice.defineSequence(LXGrid.Machine, "LXAlarmTaskSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXAlarmTask");

    LXGrid.Machine.LXCurvePoint = Slice.defineObject(
        function(time, percent)
        {
            Ice.Object.call(this);
            this.time = time !== undefined ? time : 0;
            this.percent = percent !== undefined ? percent : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::LXGrid::Machine::LXCurvePoint"
        ],
        -1,
        function(__os)
        {
            __os.writeLong(this.time);
            __os.writeInt(this.percent);
        },
        function(__is)
        {
            this.time = __is.readLong();
            this.percent = __is.readInt();
        },
        false);

    LXGrid.Machine.LXCurvePointPrx = Slice.defineProxy(Ice.ObjectPrx, LXGrid.Machine.LXCurvePoint.ice_staticId, undefined);

    Slice.defineOperations(LXGrid.Machine.LXCurvePoint, LXGrid.Machine.LXCurvePointPrx);
    Slice.defineSequence(LXGrid.Machine, "LXCurvePointSeqHelper", "Ice.ObjectHelper", false, "LXGrid.Machine.LXCurvePoint");
    exports.LXGrid = LXGrid;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : window.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : window));
